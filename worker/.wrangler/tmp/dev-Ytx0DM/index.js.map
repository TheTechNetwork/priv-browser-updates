{
  "version": 3,
  "sources": ["../bundle-QcJrB2/checked-fetch.js", "../../../src/update-service.ts", "../../../src/auth.ts", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-QcJrB2/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-QcJrB2/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Projects\\priv-browser-updates\\worker\\.wrangler\\tmp\\dev-Ytx0DM",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// This is a simplified version of the update service for the worker\n// It contains the core functionality needed for the worker\n\ninterface UpdateRequest {\n  version: string;\n  platform: string;\n  channel: string;\n  ip: string;\n  userAgent: string;\n}\n\ninterface Release {\n  version: string;\n  downloadUrl: string;\n  sha256?: string;\n  fileSize?: number;\n}\n\nexport async function processUpdateRequest(request: UpdateRequest, db: D1Database): Promise<string> {\n  // Log the update request\n  await logUpdateRequest(request, db);\n  \n  // Get the latest version for the platform and channel\n  const latestRelease = await getLatestVersion(request.platform, request.channel, db);\n  \n  // Generate and return the update XML\n  return generateUpdateXml(latestRelease, request);\n}\n\nexport async function logUpdateRequest(request: UpdateRequest, db: D1Database): Promise<void> {\n  await db.prepare(`\n    INSERT INTO updateRequests (version, platform, channel, ip, userAgent)\n    VALUES (?, ?, ?, ?, ?)\n  `).bind(\n    request.version,\n    request.platform,\n    request.channel,\n    request.ip,\n    request.userAgent\n  ).run();\n}\n\nasync function getLatestVersion(platform: string, channel: string, db: D1Database): Promise<Release | null> {\n  const releases = await db.prepare(`\n    SELECT version, downloadUrl, sha256, fileSize FROM releases\n    WHERE platform = ?\n    AND channel = ?\n    AND isActive = 1\n    ORDER BY id DESC\n    LIMIT 1\n  `).bind(platform, channel).all();\n  \n  if (releases.results.length === 0) {\n    return null;\n  }\n  \n  const result = releases.results[0];\n  return {\n    version: result.version as string,\n    downloadUrl: result.downloadUrl as string,\n    sha256: result.sha256 as string | undefined,\n    fileSize: result.fileSize as number | undefined\n  };\n}\n\nfunction compareVersions(v1: string, v2: string): number {\n  const parts1 = v1.split('.').map(part => parseInt(part, 10) || 0);\n  const parts2 = v2.split('.').map(part => parseInt(part, 10) || 0);\n  \n  for (let i = 0; i < Math.max(parts1.length, parts2.length); i++) {\n    const part1 = parts1[i] || 0;\n    const part2 = parts2[i] || 0;\n    \n    if (part1 > part2) return 1;\n    if (part1 < part2) return -1;\n  }\n  \n  return 0;\n}\n\nfunction generateUpdateXml(release: Release | null, request: { version: string }): string {\n  // If no update is available or the client is already on the latest version\n  if (!release || compareVersions(request.version, release.version) >= 0) {\n    return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response protocol=\"3.0\">\n  <app appid=\"chromium\">\n    <updatecheck status=\"noupdate\"/>\n  </app>\n</response>`;\n  }\n  \n  // Generate update XML with the new version information\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response protocol=\"3.0\">\n  <app appid=\"chromium\">\n    <updatecheck status=\"ok\">\n      <urls>\n        <url codebase=\"${release.downloadUrl}\"/>\n      </urls>\n      <manifest version=\"${release.version}\">\n        <packages>\n          <package name=\"chromium-${release.version}\" hash_sha256=\"${release.sha256 || ''}\" size=\"${release.fileSize || 0}\" required=\"true\"/>\n        </packages>\n      </manifest>\n    </updatecheck>\n  </app>\n</response>`;\n}", "interface Env {\r\n  GITHUB_CLIENT_ID: string;\r\n  GITHUB_CLIENT_SECRET: string;\r\n}\r\n\r\nexport async function handleGitHubCallback(request: Request, env: Env): Promise<Response> {\r\n  if (request.method !== 'POST') {\r\n    return new Response('Method not allowed', { status: 405 });\r\n  }\r\n\r\n  try {\r\n    const { code } = await request.json();\r\n\r\n    if (!code) {\r\n      return new Response(JSON.stringify({ error: 'No code provided' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    // Exchange the code for an access token\r\n    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n        'User-Agent': 'Cloudflare Worker',\r\n      },\r\n      body: JSON.stringify({\r\n        client_id: env.GITHUB_CLIENT_ID,\r\n        client_secret: env.GITHUB_CLIENT_SECRET,\r\n        code,\r\n      }),\r\n    });\r\n\r\n    if (!tokenResponse.ok) {\r\n      throw new Error(`GitHub API error: ${tokenResponse.status}`);\r\n    }\r\n\r\n    const data = await tokenResponse.json();\r\n\r\n    if (data.error || !data.access_token) {\r\n      return new Response(JSON.stringify({ error: data.error_description || 'Failed to get access token' }), {\r\n        status: 400,\r\n        headers: { 'Content-Type': 'application/json' }\r\n      });\r\n    }\r\n\r\n    return new Response(JSON.stringify({ access_token: data.access_token }), {\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  } catch (err) {\r\n    const errorMessage = err instanceof Error ? err.message : 'Internal server error';\r\n    return new Response(JSON.stringify({ error: errorMessage }), {\r\n      status: 500,\r\n      headers: { 'Content-Type': 'application/json' }\r\n    });\r\n  }\r\n} ", "import { processUpdateRequest } from \"./update-service\";\nimport { handleGitHubCallback } from './auth';\n\nexport interface Env {\n  DB: D1Database;\n  CACHE: KVNamespace;\n  GITHUB_CLIENT_ID: string;\n  GITHUB_CLIENT_SECRET: string;\n}\n\nexport default {\n  // ctx is required by Cloudflare Workers runtime but not used in our code\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    // Use ctx.waitUntil for background tasks if needed\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // Handle update requests\n    if (path === \"/update\") {\n      const version = url.searchParams.get(\"version\");\n      const platform = url.searchParams.get(\"platform\");\n      const channel = url.searchParams.get(\"channel\");\n\n      if (!version || !platform || !channel) {\n        return new Response(\"Missing required parameters\", { status: 400 });\n      }\n\n      // Process the update request\n      const updateRequest = {\n        version,\n        platform,\n        channel,\n        ip: request.headers.get(\"cf-connecting-ip\") || \"unknown\",\n        userAgent: request.headers.get(\"user-agent\") || \"unknown\",\n      };\n\n      try {\n        const xml = await processUpdateRequest(updateRequest, env.DB);\n        return new Response(xml, {\n          headers: {\n            'Content-Type': 'application/xml',\n            'Cache-Control': 'no-cache'\n          }\n        });\n      } catch (error) {\n        return new Response(error instanceof Error ? error.message : 'Internal server error', {\n          status: 500\n        });\n      }\n    }\n\n    // Handle API requests (for admin dashboard)\n    if (path.startsWith('/api/')) {\n      return handleApiRequest(request, url, env);\n    }\n\n    // Handle GitHub OAuth callback\n    if (path === '/api/auth/github/callback') {\n      return handleGitHubCallback(request, env);\n    }\n\n    // Handle 404 for unknown routes\n    return new Response(\"Not found\", { status: 404 });\n  }\n};\n\nasync function handleApiRequest(request: Request, url: URL, env: Env): Promise<Response> {\n  // This would handle API requests from the admin dashboard\n  // For security, these should be authenticated\n  \n  const apiKey = request.headers.get('X-API-Key');\n  if (!apiKey) {\n    return new Response('API key required', { status: 401 });\n  }\n  // In a real implementation, validate the API key against a stored value\n  \n  // Example API endpoints\n  if (url.pathname === '/api/releases') {\n    const releases = await env.DB.prepare('SELECT * FROM releases ORDER BY id DESC').all();\n    return new Response(JSON.stringify(releases.results), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  if (url.pathname === '/api/stats') {\n    // Get total update requests\n    const requestsCount = await env.DB.prepare('SELECT COUNT(*) as count FROM updateRequests').first();\n    \n    // Get latest request\n    const latestRequest = await env.DB.prepare(`\n      SELECT * FROM updateRequests \n      ORDER BY timestamp DESC \n      LIMIT 1\n    `).first();\n\n    return new Response(JSON.stringify({\n      requestsCount: requestsCount?.count || 0,\n      latestRequest\n    }), {\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n  \n  return new Response('API endpoint not found', { status: 404 });\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\src\\\\index.ts\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-QcJrB2\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-QcJrB2\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Projects\\\\priv-browser-updates\\\\worker\\\\.wrangler\\\\tmp\\\\bundle-QcJrB2\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
